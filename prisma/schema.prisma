// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
	provider = "prisma-client-js"
}

datasource db {
	provider = "postgresql"
	url      = env("DATABASE_URL")
}

model Account {
	id                 String  @id @default(cuid())
	userId             String
	type               String
	provider           String
	providerAccountId  String
	refresh_token      String?  
	access_token       String?  
	expires_at         Int?
	token_type         String?
	scope              String?
	id_token           String?
	session_state      String?

	user User @relation(fields: [userId], references: [id], onDelete: Cascade)

	@@unique([provider, providerAccountId])
}

model Session {
	id           String   @id @default(cuid())
	sessionToken String   @unique
	userId       String
	expires      DateTime
	user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
	identifier String
	token      String   @unique
	expires    DateTime

	@@unique([identifier, token])
}

model User {
	id            String    @id @default(cuid())
	name          String?
	email         String?   @unique
	emailVerified DateTime?
	image         String?
	role          Role     @default(USER)
	accounts      Account[]
	sessions      Session[]
	Scenario      Scenario[]
	Weapon				Weapon[]
}

enum Role {
	USER
	SUPERUSER
	ADMIN
}

model Scenario {
	id          String   @id @default(cuid())
	name        String
	universe    String
	description String?
	userId      String
	user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
	character   Character[]
}

model Character {
	id          String   @id @default(cuid())
	name        String
	pj          Boolean

	age         Int?
	image       String?
	origin      String?
	role        String?
	injury      String?
	extra       String?

	weapon      Weapon[]
	skillSet    CharacterSkill[]
	scenario    Scenario[]
	strength    Strength[]
	weakness    Weakness[]

	fortuneId   String?
	fortune     Fortune? @relation(fields: [fortuneId], references: [id], onDelete: SetNull)

	alignmentId String?
	alignment   Alignment? @relation(fields: [alignmentId], references: [id], onDelete: SetNull)

	tempermentId String?
	temperment   Temperment? @relation(fields: [tempermentId], references: [id], onDelete: SetNull)
}

model CharacterSkill {
	id          String   @id @default(cuid())
	name        String	@unique
	character   Character[]
}

model Fortune {
	id          String   @id @default(cuid())
	name        String	@unique
	description String?
	character   Character[]
}

model Alignment {
	id          String   @id @default(cuid())
	name        String	@unique
	description String?
	character   Character[]
}

model Temperment {
	id          String   @id @default(cuid())
	name        String	@unique
	description String?
	character   Character[]
}

model Strength {
	id          String   @id @default(cuid())
	name        String	@unique
	character   Character[]
}

model Weakness {
	id          String   @id @default(cuid())
	name        String	@unique
	character   Character[]
}

model Weapon {
	id          String   @id @default(cuid())
	name        String
	melee       Boolean
	description String?
	character   Character[]
	weaponSkill WeaponSkill[]

	userId			String
	user			User @relation(fields: [userId], references: [id], onDelete: Cascade)

	damageId    String
	damage      Damage @relation(fields: [damageId], references: [id], onDelete: Cascade)

	weightId    String
	weight      Weight @relation(fields: [weightId], references: [id], onDelete: Cascade)

	rangeId     String
	range       Range @relation(fields: [rangeId], references: [id], onDelete: Cascade)

	ammoId      String?
	ammo        Ammo? @relation(fields: [ammoId], references: [id], onDelete: Cascade)
}

model WeaponSkill {
	id          String   @id @default(cuid())
	name        String	@unique
	weapon 		Weapon[]
}

model Damage {
	id          String   @id @default(cuid())
	name        String	@unique
	weapon      Weapon[]
}

model Weight {
	id          String   @id @default(cuid())
	name        String 	@unique
	weapon      Weapon[]
}

model Ammo {
	id          String   @id @default(cuid())
	name        String 	@unique
	weapon      Weapon[]
}

model Range {
	id          String   @id @default(cuid())
	name        String 	@unique
	weapon      Weapon[]
}